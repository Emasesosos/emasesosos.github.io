{"version":3,"sources":["img/logo.svg","componentes/Header.js","componentes/Formulario.js","componentes/AgregarCita.js","componentes/Cita.js","componentes/ListaCitas.js","componentes/Imagen.js","componentes/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","props","react_default","a","createElement","className","titulo","Formulario","nombreMascotaRef","React","createRef","nombrePropietarioRef","fechaRef","horaRef","sintomasRef","state","error","crearNuevaCita","e","preventDefault","mascota","_this","current","value","propietario","fecha","hora","sintomas","setState","nuevaCita","id","uuid","crearCita","currentTarget","reset","existeError","this","action","onSubmit","htmlFor","ref","type","placeholder","Component","AgregarCita","componentes_Formulario","Cita","eliminarCita","borrarCita","info","_this$props$info","onClick","ListaCitas","citas","mensaje","Object","keys","length","map","cita","componentes_Cita","key","Imagen","src","logo","alt","App","concat","toConsumableArray","console","log","filter","citasLS","localStorage","getItem","JSON","parse","setItem","stringify","componentes_Header","componentes_AgregarCita","componentes_ListaCitas","componentes_Imagen","Boolean","window","location","hostname","match","ReactDOM","render","componentes_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1c303b91.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Header = props => {\r\n    return(\r\n        <header>\r\n            <h1 className=\"text-center\">{props.titulo}</h1>\r\n        </header>\r\n    )\r\n}\r\n\r\nHeader.propTypes = {\r\n    titulo: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport uuid from 'uuid'; // Crea ID único\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Formulario extends Component {\r\n\r\n    // ***** Refs\r\n    nombreMascotaRef = React.createRef();\r\n    nombrePropietarioRef = React.createRef();\r\n    fechaRef = React.createRef();\r\n    horaRef = React.createRef();\r\n    sintomasRef = React.createRef();\r\n\r\n    state = {\r\n        error: false,\r\n    }\r\n\r\n    crearNuevaCita = (e) => {\r\n        e.preventDefault();\r\n        // console.log('Hiciste Click');\r\n\r\n        const mascota = this.nombreMascotaRef.current.value,\r\n              propietario = this.nombrePropietarioRef.current.value,\r\n              fecha = this.fechaRef.current.value,\r\n              hora = this.horaRef.current.value,\r\n              sintomas = this.sintomasRef.current.value;\r\n\r\n        if (mascota === '' || propietario === '' || fecha === '' || hora === '' || sintomas === '') {\r\n            this.setState({\r\n                error: true,\r\n            })\r\n        } else {\r\n\r\n            const nuevaCita = {\r\n                id: uuid(),\r\n                mascota: mascota,\r\n                propietario, // Object Literal Enhacement\r\n                fecha: fecha,\r\n                hora, // Object Literal Enhacement\r\n                sintomas: sintomas\r\n            }\r\n\r\n            // ***** Se envia el objeto hacia el padre\r\n            this.props.crearCita(nuevaCita);\r\n\r\n            // ***** Reiniciar el formulario\r\n            // console.log(e.currentTarget);\r\n            e.currentTarget.reset();\r\n\r\n            // ***** Elimina error\r\n            this.setState({\r\n                error: false,\r\n            })\r\n\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        const existeError = this.state.error;\r\n\r\n        return(\r\n            <div>\r\n                <form action=\"\" onSubmit={this.crearNuevaCita}>\r\n                    <div className=\"form-group row\">\r\n                        <label htmlFor=\"\" className=\"col-sm-4 col-lg-2 col-form-label\">Nombre Mascota</label>\r\n                        <div className=\"col-sm-8 col-lg-10\">\r\n                            <input ref={this.nombreMascotaRef} type=\"text\" className=\"form-control\" placeholder=\"Nombre Mascota\"/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"form-group row\">\r\n                        <label htmlFor=\"\" className=\"col-sm-4 col-lg-2 col-form-label\">Nombre Dueño</label>\r\n                        <div className=\"col-sm-8 col-lg-10\">\r\n                            <input ref={this.nombrePropietarioRef} type=\"text\" className=\"form-control\" placeholder=\"Nombre Dueño de la Mascota\"/>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"form-group row\">\r\n                        <label className=\"col-sm-4 col-lg-2 col-form-label\">Fecha</label>\r\n                        <div className=\"col-sm-8 col-lg-4  mb-4 mb-lg-0\">\r\n                            <input ref={this.fechaRef} type=\"date\" className=\"form-control\" />\r\n                        </div>                            \r\n\r\n                        <label className=\"col-sm-4 col-lg-2 col-form-label\">Hora</label>\r\n                        <div className=\"col-sm-8 col-lg-4\">\r\n                            <input ref={this.horaRef} type=\"time\" className=\"form-control\" />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"form-group row\">\r\n                        <label className=\"col-sm-4 col-lg-2 col-form-label\">Síntomas</label>\r\n                        <div className=\"col-sm-8 col-lg-10\">\r\n                            <textarea ref={this.sintomasRef}  className=\"form-control\"></textarea>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"form-group row justify-content-end\">\r\n                        <div className=\"col-sm-3\">\r\n                            <button type=\"submit\" className=\"btn btn-success w-100\">Agregar</button>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                </form>\r\n\r\n                {existeError ? <div className=\"alert alert-danger text-center\">Todos los Campos son Obligatorios</div> : ''}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nFormulario.propTypes = {\r\n    crearCita: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Formulario;","import React, { Component } from 'react';\r\nimport Formulario from './Formulario';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass AgregarCita extends Component {\r\n\r\n    state = {}\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"card mt-5\">\r\n                <div className=\"card-body\">\r\n                    <h2 className=\"card-title text-center mb-5\">Agregar las Citas Aquí</h2>\r\n                    {/* ***** Componente: Formulario ***** */}\r\n                    <Formulario\r\n                                crearCita={this.props.crearCita}\r\n                    ></Formulario>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nAgregarCita.propTypes = {\r\n    crearCita: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default AgregarCita;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Cita extends Component {\r\n\r\n    eliminarCita = () => {\r\n        // console.log(`Eliminando Cita... ${this.props.info.id}`);\r\n        this.props.borrarCita(this.props.info.id);\r\n    }\r\n\r\n    render() {\r\n        \r\n        const { mascota, propietario, fecha, hora, sintomas } = this.props.info;\r\n        // console.log(this.props.info);\r\n        /*\r\n        console.log(mascota);\r\n        console.log(propietario);\r\n        console.log(fecha);\r\n        console.log(hora);\r\n        console.log(sintomas);\r\n        */\r\n\r\n        return(\r\n            <div className=\"media mt-3\">\r\n                <div className=\"media-body\">\r\n                    <h3 className=\"mt-0\">{mascota}</h3>\r\n                    <p className=\"card-text\"><span>Nombre del Dueño: </span>{propietario}</p>\r\n                    <p className=\"card-text\"><span>Fecha: </span>{fecha}</p>\r\n                    <p className=\"card-text\"><span>Hora: </span>{hora}</p>\r\n                    <p className=\"card-text\"><span>Sintomas: </span></p>\r\n                    <p className=\"card-text\">{sintomas}</p>\r\n\r\n                    <button onClick={this.eliminarCita} className=\"btn btn-danger\">Borrar &times;</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nCita.propTypes = {\r\n    info: PropTypes.shape({\r\n        mascota: PropTypes.string.isRequired,\r\n        propietario: PropTypes.string.isRequired,\r\n        fecha: PropTypes.string.isRequired,\r\n        hora: PropTypes.string.isRequired,\r\n        sintomas: PropTypes.string.isRequired,\r\n        id: PropTypes.string.isRequired,\r\n    }),\r\n    borrarCita: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Cita;","import React, { Component } from 'react';\r\nimport Cita from './Cita';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass ListaCitas extends Component {\r\n    render() {\r\n        const citas = this.props.citas;\r\n        const mensaje = Object.keys(citas).length === 0 ? 'No hay Citas' : 'Administra tus Citas Aquí'\r\n        // console.log(Object.keys(citas).length); \r\n\r\n        return(\r\n            <div className=\"card mt-5\">\r\n                <div className=\"card-body\">\r\n                    <h2 className=\"card-title text-center\">{mensaje}</h2>\r\n                    <div className=\"lista-citas\">\r\n                        {/* ***** Componente: Cita ***** */}\r\n                        {Object.keys(this.props.citas).map(cita => (\r\n                            <Cita \r\n                                    key={cita}\r\n                                    info={this.props.citas[cita]}\r\n                                    borrarCita={this.props.borrarCita}\r\n                            ></Cita>\r\n                        ))}\r\n                    </div>\r\n                   \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nListaCitas.propTypes = {\r\n    citas: PropTypes.array.isRequired,\r\n    borrarCita: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default ListaCitas;","import React, { Component } from 'react';\r\nimport logo from './../img/logo.svg';\r\nimport './../css/App.css';\r\n\r\nclass Imagen extends Component {\r\n    render() {\r\n        return(\r\n            <div className=\"App\">\r\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Imagen;","import React, { Component } from 'react';\r\nimport Header from './Header';\r\nimport AgregarCita from './AgregarCita';\r\nimport ListaCitas from './ListaCitas';\r\nimport Imagen from './Imagen';\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    citas: []\r\n  }\r\n\r\n  /* ***** Ciclo de vida de los componentes ***** */\r\n\r\n  // ***** componentDidMount()\r\n  componentDidMount() {\r\n    // console.log('Esta listo');\r\n    const citasLS = localStorage.getItem('citas');\r\n    if (citasLS) {\r\n      this.setState({\r\n        citas: JSON.parse(citasLS) // Convierte de un string a un objeto\r\n      })\r\n    }\r\n  }\r\n\r\n  // ***** componentDidUpdate()\r\n  componentDidUpdate() {\r\n    //console.log('¡¡Algo cambio!!');\r\n    /* ***** Uso de Local Storage: Solo puede almacenar cadenas de texto ***** */\r\n    localStorage.setItem(\r\n      'citas',\r\n      JSON.stringify(this.state.citas) // Convierte de un objeto a un string\r\n    )\r\n  }\r\n\r\n  /*\r\n  // ***** componentWillMount()\r\n  componentWillMount() {\r\n    console.log('Yo me ejecuto antes');\r\n  }\r\n\r\n  // ***** componentWillUnmount()\r\n  componentWillUnmount() {\r\n    console.log('Yo hasta que se cierra el componente');\r\n  }\r\n  */\r\n\r\n  crearCita = (nuevaCita) => {\r\n    // console.log('Desde app.js');\r\n    //console.log(cita); // Viene de Formulario\r\n    const citas = [...this.state.citas, nuevaCita]; // Copia del state\r\n    console.log(citas);\r\n\r\n    this.setState({\r\n      citas: citas,\r\n    })\r\n  }\r\n\r\n  borrarCita = id => {\r\n    console.log(id);\r\n    // ***** Obtener copia del state\r\n    const citasActuales = [...this.state.citas];\r\n    /*\r\n    console.log('Antes...');\r\n    console.log(citasActuales);\r\n    */\r\n\r\n    // ***** Borrar el elemento del state\r\n    const citas = citasActuales.filter(cita => cita.id !== id);\r\n    /*\r\n    console.log('Despues...');\r\n    console.log(citas);\r\n    */\r\n\r\n    // ***** Actualizar el state\r\n    this.setState({\r\n      citas\r\n    });\r\n\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div className=\"App container\">\r\n        {/* ***** Componente: Header ***** */}\r\n        <Header\r\n                titulo={'Administrador de Pacientes de Veterinaria'}\r\n        ></Header>\r\n        {/* ***** Componente: Agregar Cita ***** */}\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6\">\r\n            <AgregarCita\r\n                          crearCita={this.crearCita}\r\n            ></AgregarCita>\r\n          </div>\r\n          {/* ***** Componente: ListaCitas ***** */}\r\n          <div className=\"col-md-6\">\r\n            <ListaCitas\r\n                        citas={this.state.citas}\r\n                        borrarCita={this.borrarCita}\r\n            ></ListaCitas>\r\n          </div>\r\n        </div>\r\n        {/* ***** Componente: Imagen ***** */}\r\n        <div className=\"row\">\r\n          <div className=\"col-md-4 centro\">\r\n            <Imagen></Imagen>\r\n          </div>\r\n          <div className=\"col-md-4 centro\">\r\n            <h1 className='tamaño'>React</h1>\r\n          </div>\r\n          <div className=\"col-md-4 centro\">\r\n            <Imagen></Imagen>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n/*\r\nfunction App() {\r\n  return (\r\n    \r\n  );\r\n}\r\n*/\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './componentes/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App /> , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}