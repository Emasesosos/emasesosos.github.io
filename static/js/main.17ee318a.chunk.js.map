{"version":3,"sources":["componentes/Header.js","componentes/Formulario.js","componentes/Error.js","componentes/Clima.js","componentes/Imagen.js","componentes/App.js","serviceWorker.js","index.js","img/logo.svg"],"names":["Header","props","react_default","a","createElement","className","href","titulo","Formulario","ciudadRef","React","createRef","paisRef","buscarClima","e","preventDefault","respuesta","ciudad","_this","current","value","pais","datosConsulta","action","onSubmit","this","ref","id","type","htmlFor","name","defaultValue","Component","Error","mensaje","Clima","mostrarResultado","_this$props$resultado","resultado","weather","main","urlIcono","concat","icon","alt","temp","toFixed","src","temp_max","temp_min","Imagen","logo","App","state","error","consulta","consultarApi","_this$state$consulta","url","fetch","then","json","datos","setState","catch","console","log","prevProps","prevState","cod","componentes_Error","componentes_Clima","componentes_Header","componentes_Formulario","componentes_Imagen","Boolean","window","location","hostname","match","ReactDOM","render","componentes_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.17ee318a.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Header = (props) => {\r\n    return(\r\n        <div>\r\n            <nav>\r\n                <div className=\"nav-wrapper light-blue darken-2\">\r\n                    <a href=\"https://api.openweathermap.org/data/2.5/weather?q=mexico&appid=1e6c661872ef0f8b23ef9b0c7fb48912\" className=\"brand-logo\">{props.titulo}</a>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    );\r\n};\r\n\r\nHeader.propTypes = {\r\n    titulo: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Formulario extends Component {\r\n\r\n    /* ***** Validar Formulario ***** */\r\n    \r\n    // ***** Crear los refs\r\n    ciudadRef = React.createRef();\r\n    paisRef = React.createRef();\r\n    \r\n    buscarClima = (e) => {\r\n        e.preventDefault();\r\n        // ***** Leer los refs y crear el objeto\r\n        const respuesta = {\r\n            ciudad: this.ciudadRef.current.value,\r\n            pais: this.paisRef.current.value,\r\n        }\r\n        // console.log(respuesta);\r\n\r\n        // ***** Enviar por props\r\n        this.props.datosConsulta(respuesta);\r\n\r\n        // ***** Opcional resetear el form\r\n    }\r\n\r\n    /* ***** Validar Formulario ***** */\r\n    render() {\r\n        return(\r\n            <div className=\"contenedor-form\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <form action=\"\" onSubmit={this.buscarClima}>\r\n                            <div className=\"input-field col s12 m8 l4 offset-m2\">\r\n                                <input ref={this.ciudadRef} id=\"ciudad\" type=\"text\"/>\r\n                                <label htmlFor=\"ciudad\">Ciudad: </label>\r\n                            </div>\r\n                            <div className=\"input-field col s12 m8 l4 offset-m2\">\r\n                                <select ref={this.paisRef} name=\"\" id=\"\">\r\n                                    <option value=\"\" defaultValue>Elige un País</option>\r\n                                    <option value=\"AR\">Argentina</option>\r\n                                    <option value=\"CO\">Colombia</option>\r\n                                    <option value=\"CR\">Costa Rica</option>\r\n                                    <option value=\"ES\">España</option>\r\n                                    <option value=\"US\">Estados Unidos</option>\r\n                                    <option value=\"MX\">México</option>\r\n                                    <option value=\"PE\">Peru</option>\r\n                                </select>\r\n                                <label htmlFor=\"pais\">País: </label>\r\n                            </div>\r\n                            <div className=\"input-field col s12 m8 l4 offset-m2 buscador\">\r\n                                <input type=\"submit\" className=\"waves-effect waves-light btn-large yellow accent-4\" value=\"Buscar...\"/>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nFormulario.propTypes = {\r\n    datosConsulta: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Formulario;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Error = (props) => {\r\n    return(\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col s12 m6 offset-m3\">\r\n                    <div className=\"card-panel red darken-4 error\">\r\n                        {props.mensaje}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nError.propTypes = {\r\n    mensaje: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Error;","import React , { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Clima extends Component {\r\n\r\n    mostrarResultado = () => {\r\n        // Obtener los datos de la consulta\r\n        const { name, weather, main } = this.props.resultado;\r\n        if(!name || !weather || !main) return null;\r\n\r\n        const kelvin = 273.15;\r\n        const urlIcono = `http://openweathermap.org/img/w/${weather[0].icon}.png`;\r\n        const alt = `clima de ${name}`;\r\n\r\n        return(\r\n            <div className=\"row\">\r\n                <div className=\"resultado col s12 m8 l6 offset-m2 offset-l3\">\r\n                    <div className=\"card-panel light-blue align-center\">\r\n                        <span className=\"white-text\">\r\n                            <h2>Resultado Clima de: {name}</h2>\r\n                            <p className=\"temperatura\">\r\n                                Actual: { (main.temp - kelvin).toFixed(2) } &deg;C\r\n                                <img src={urlIcono} alt={alt}/>\r\n                            </p>\r\n                            <p>Max. { (main.temp_max - kelvin).toFixed(2) } &deg;C</p>\r\n                            <p>Min. { (main.temp_min - kelvin).toFixed(2) } &deg;C</p>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        // console.log(this.props.resultado);\r\n        return(\r\n            <div className=\"container\">\r\n                {this.mostrarResultado()} \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nClima.propTypes = {\r\n    resultado: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default Clima;","import React, { Component } from 'react';\r\nimport logo from './../img/logo.svg';\r\n\r\nclass Imagen extends Component {\r\n    render() {\r\n        return(\r\n            <div>\r\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Imagen;","import React, { Component } from 'react';\r\nimport Header from './Header';\r\nimport Formulario from './Formulario';\r\nimport Error from './Error';\r\nimport Clima from './Clima';\r\nimport Imagen from './Imagen';\r\nimport './../css/App.css';\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    error: '',\r\n    consulta: {},\r\n    resultado: {}\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    /*\r\n    console.log('Props');\r\n    console.log(prevProps);\r\n    console.log('state');\r\n    console.log(prevState);\r\n    */\r\n   if(prevState.consulta !== this.state.consulta) {\r\n     this.consultarApi();\r\n   }\r\n    \r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      error: false\r\n    })\r\n  }\r\n\r\n  consultarApi = () => {\r\n    const { ciudad, pais } = this.state.consulta;\r\n    // console.log(ciudad);\r\n    // console.log(pais;\r\n    if(!ciudad || !pais) return null;\r\n\r\n    // ***** Leer la url y agregar el api key\r\n    const appId = '1e6c661872ef0f8b23ef9b0c7fb48912';\r\n    let url = `https://api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&appid=${appId}`;\r\n    // console.log(url);\r\n\r\n    // ***** Query con fetch API\r\n    fetch(url)\r\n      .then(respuesta => {\r\n        // console.log(respuesta);\r\n        return respuesta.json();\r\n      })\r\n      .then(datos => {\r\n        // console.log(datos);\r\n        this.setState({\r\n          resultado: datos,\r\n        })\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      })\r\n    \r\n  }\r\n\r\n  datosConsulta = respuesta => {\r\n    // console.log(respuesta);\r\n    if(respuesta.ciudad === '' || respuesta.pais === ''){\r\n      // console.log('Hay errores');\r\n      this.setState({\r\n        error: true,\r\n      })\r\n    } else {\r\n      // console.log('Todo correcto');\r\n      this.setState({\r\n        consulta: respuesta,\r\n        error: false,\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    const {error} = this.state;\r\n    // console.log(error);\r\n    const { cod } = this.state.resultado;\r\n\r\n    let resultado;\r\n\r\n    if(error) {\r\n       /* ***** Componente: Error ***** */\r\n      resultado = <Error \r\n                          mensaje=\"Ambos campos son obligatorios\"\r\n                  ></Error>\r\n    } else if (cod === \"404\") {\r\n      resultado = <Error\r\n                          mensaje=\"Ciudad no encontrada\"\r\n                  ></Error>\r\n    } else {\r\n      /* ***** Componente: Clima ***** */\r\n      resultado = <Clima\r\n                          resultado = {this.state.resultado}\r\n                  ></Clima>\r\n    }\r\n\r\n    return(\r\n      <div className=\"app\">\r\n\r\n          {/* ***** Componente: Header ***** */}\r\n          <Header\r\n                  titulo='Clima React'\r\n          ></Header>\r\n\r\n          {/* ***** Componente: Formulario ***** */}\r\n          <Formulario\r\n                      datosConsulta={this.datosConsulta}\r\n          ></Formulario>\r\n          {resultado}\r\n          {/* ***** Componente: Imagen ***** */}\r\n          <div className=\"row\">\r\n              <div className=\"col-md-4 centro\">\r\n                <Imagen></Imagen>\r\n              </div>\r\n              <div className=\"col-md-4 centro\">\r\n                <h1 className='tamaño'>ReactJS</h1>\r\n              </div>\r\n          </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n/*\r\nfunction App() {\r\n  return (\r\n    \r\n  );\r\n}\r\n*/\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './componentes/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}